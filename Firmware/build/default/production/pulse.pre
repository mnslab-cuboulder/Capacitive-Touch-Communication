
# 1 "pulse.c"

# 21 "pulse.h"
typedef enum{OFF=0, ON} state_t;

typedef enum{FAILED=0,SUCCEED} result_t;

result_t FF_Write(state_t x);

result_t FF_Read(state_t* x);

# 13 "/Applications/microchip/xc8/v1.41/include/stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 14 "pulse.c"
typedef struct fifo{
uint8_t iByte;
uint8_t iBit;
uint8_t oByte;
uint8_t oBit;
uint8_t buff[(160)>>3];
} fifo_t;

fifo_t FIFO;

result_t FF_Write(state_t x){

uint16_t in, out;

in = (FIFO.iByte<<3) + FIFO.iBit;
out = (FIFO.oByte<<3) + FIFO.oBit;

if((in+1)==out){

return FAILED;
}
else{

x = x & 0x1;

if(x){
FIFO.buff[FIFO.iByte] |= (uint8_t)(0x1<<FIFO.iBit);
}
else{
FIFO.buff[FIFO.iByte] &= ~(uint8_t)(0x1<<FIFO.iBit);
}

FIFO.iBit++;
if(FIFO.iBit==8){

FIFO.iBit = 0;
FIFO.iByte++;

if(FIFO.iByte==((160)>>3)){
FIFO.iByte = 0;
}
}

return SUCCEED;
}
}

result_t FF_Read(state_t* x){

uint16_t in, out;

in = (FIFO.iByte<<3) + FIFO.iBit;
out = (FIFO.oByte<<3) + FIFO.oBit;

if(in == out){

return FAILED;
}
else{

*x = (state_t)((FIFO.buff[FIFO.oByte]>>(FIFO.oBit)) & 0x1);

FIFO.oBit++;
if(FIFO.oBit==8){

FIFO.oBit = 0;
FIFO.oByte++;

if(FIFO.oByte==((160)>>3)){
FIFO.oByte = 0;
}
}

return SUCCEED;
}
}
